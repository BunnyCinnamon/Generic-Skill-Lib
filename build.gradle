buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

version = "${mc_version}-${mayor}.${noapi}.${minor}.${patch}${extra}"
group = "arekkuusu"
archivesBaseName = "GenericSkillLib"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: "${mc_mappings_channel}", version: "${mc_mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            properties 'fml.earlyprogresswindow': 'false'
            properties 'forge.logging.console.level': 'debug'

            mods {
                genericskilllib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            properties 'forge.logging.console.level': 'debug'

            mods {
                genericskilllib {
                    source sourceSets.main
                }
            }
        }

        data {
            properties 'fml.earlyprogresswindow': 'false'
            workingDirectory project.file('run')
            forceExit false

            mods {
                genericskilllib {
                    source sourceSets.main
                }
            }
            args '--mod', 'genericskilllib', '--all',
                    '--existing', '"' + file('src/main/resources/') + '"',
                    '--existing', '"' + file('src/generated/resources/') + '"',
                    '--output', '"' + file('src/generated/resources/') + '"'
        }
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${archivesBaseName}-${version}-deobf.${extension}"
}

artifacts {
    archives deobfJar
    archives shadowJar
}

repositories {
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly (name: 'com.expression.parser-2.0.0')
    shadow (name: 'com.expression.parser-2.0.0')
}

jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.txt"
    exclude "**/*.d"
    manifest {
        attributes([
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    project.configurations.shadow.setTransitive(true);
    configurations = [project.configurations.shadow]

    classifier ''
}

build.dependsOn shadowJar

jar.finalizedBy('reobfJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    //noinspection GroovyAssignabilityCheck
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

//sourceSets.main.resources {
//    srcDir 'src/generated/resources'
//}
